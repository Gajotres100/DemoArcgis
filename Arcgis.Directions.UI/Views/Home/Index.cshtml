@model Arcgis.Directions.VM.GetPOIVM

@{

}

<script>
    $(document).ready(function () {
        $("#keywords-manual").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: "/Home/GetPoiList",
                    data: "{ 'keywords': '" + request.term + "' }",
                    dataType: 'json',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataFilter: function (data) { return data; },
                    success: function (data) {
                        response($.map(data, function (item) {
                            return {
                                label: item.PoiDesc,
                                value: item.PoiDesc,
                                id: item.PoiID
                            };
                        }))
                    }
                });
            },
            minLength: 2
        });
    })
    require([
      "esri/urlUtils", "esri/map", "esri/dijit/Directions",
      "dojo/parser",
      "dijit/layout/BorderContainer", "dijit/layout/ContentPane", "dojo/domReady!"
     ], function (
      urlUtils, Map, Directions,
      parser
    ) {
         parser.parse();

        var map = new Map("map", {
            basemap: "streets",
            center: [15.20, 45.10],
            sliderPosition: "top-right",
            zoom: 7
        });
      

        var directions = new Directions({
            map: map,
            routeTaskUrl: "@System.Configuration.ConfigurationManager.AppSettings["routeTaskUrl"]",            
        }, "dir");

         directions.startup();

         directions.on("load", function () {
             //adjust map div after the widget has loaded so our checkbox doesn't shift things
             map.reposition();
         });      

         directions.on("directions-finish", function () {
             //clickGraphicsLayer.clear();
         });


         //var checkbox = document.getElementById("keywords-manual");

         //create an event listener that hooks up click events and turns them off when people interact with the checkbox
         //checkbox.onchange = function () {
         //    if (checkbox.checked == false) {
         //        addGraphics.remove()
         //    }
         //    else
         //        addGraphics = map.on('click', addGraphicPoints);
         //}

         ////wire up the map click event listener by default
         //var addGraphics = map.on('click', addGraphicPoints);

         ////create a separate graphics layer to display stops before the route has been solved
         //var clickGraphicsLayer = new GraphicsLayer();
         //map.addLayer(clickGraphicsLayer);

         //function addGraphicPoints(evt) {

         //    var existingBlank = false;
         //    var graphic = new Graphic(evt.mapPoint, directions.stopSymbol);

         //    for (var i = 0; i <= directions.stops.length - 1; i++) {
         //        if (directions.stops[i].name === "") {
         //            //update an existing stop and break out of the loop if you encounter one without an address
         //            directions.updateStop(graphic, i);
         //            clickGraphicsLayer.add(graphic);
         //            existingBlank = true;
         //            break;
         //        }
         //    }
         //    //if all existing stops have an address supplied, add a new one
         //    if (existingBlank == false)
         //        directions.addStop(graphic);
         //    clickGraphicsLayer.add(graphic);
         //}


         //var companyLocation = new esri.geometry.Point(45.10, 15.20);
         //navigator.geolocation.getCurrentPosition(function (position) {
         //    var currentLocation = new esri.geometry.Point(position.coords);
         //    alert(currentLocation);
         //    //directions.AddStops([currentLocation, companyLocation]);
         //});

         var extent = new esri.geometry.Extent({
             "xmin": -8576501,
             "ymin": 4705377,
             "xmax": -8574612,
             "ymax": 4706867,
             "spatialReference": {
                 "wkid": 3857
             }
         });
        
    });
</script> 
@Html.TextBoxFor(m => m.CusPoiInput.Name, new { @class = "form-control", @id = "keywords-manual" })
<div data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="design:'headline', gutters:false"  style="width:100%;height:100%;">
    <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'left'" style="width:250px;">
        <div id="dir"></div>
    </div>
    <div id="map" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'center'"></div>
</div>

