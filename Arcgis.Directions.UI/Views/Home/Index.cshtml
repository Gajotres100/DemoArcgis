@model Arcgis.Directions.VM.GetPOIVM
@{
    Layout = "~/Views/Shared/_LayoutGdi.cshtml";
}

<script>


    function CallChangefunc(val) {
        window.location.href = '@Url.Action("ChangeLanguage", "Home", new { lang = "ID" })'.replace("ID", val);
    }

    var map;
    require([
      "dojo/parser",
      "dojo/ready",
      "dojo/_base/array",
      "esri/Color",
      "dojo/dom-style",
      "dojo/query",

      "esri/map",
      "esri/dijit/Directions",
      "esri/tasks/locator",
      "esri/request",
      "esri/graphic",
      "esri/geometry/Extent",

      "esri/symbols/SimpleMarkerSymbol",
      "esri/symbols/SimpleFillSymbol",
      "esri/symbols/PictureMarkerSymbol",
      "esri/renderers/ClassBreaksRenderer",

      "esri/layers/GraphicsLayer",
      "esri/SpatialReference",
      "esri/dijit/PopupTemplate",
      "esri/geometry/Point",
      "esri/geometry/webMercatorUtils",

       "@(HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority) + @HttpContext.Current.Request.ApplicationPath )/ClusterLayer.js",

      "dijit/layout/BorderContainer",
      "dijit/layout/ContentPane",
      "dojo/domReady!"
    ], function (
      parser, ready, arrayUtils, Color, domStyle, query,
      Map, Directions, Locator, esriRequest, Graphic, Extent,
      SimpleMarkerSymbol, SimpleFillSymbol, PictureMarkerSymbol, ClassBreaksRenderer,
      GraphicsLayer, SpatialReference, PopupTemplate, Point, webMercatorUtils,
      ClusterLayer
    ) {
        ready(function () {
            parser.parse();

            var clusterLayer;
            var popupOptions = {
                "markerSymbol": new SimpleMarkerSymbol("circle", 20, null, new Color([0, 0, 0, 0.25])),
                "marginLeft": "20",
                "marginTop": "20"
            };
            var directions;
            var routeData;

            var customExtentAndSR = new esri.geometry.Extent(1435961, 5153248, 2199656, 5903895, new esri.SpatialReference({ "wkid": @System.Configuration.ConfigurationManager.AppSettings["wkid"] }));

            map = new Map("map", {
                extent: customExtentAndSR,
                basemap: "streets",
                center: [15.20, 45.10],
                autoResize: true,
                sliderPosition: "top-right",
                zoom: 4,
                lods: [
                 //{ level: 0,  resolution: 156543.033928,  scale: 591657527.591555},
                 //{ level: 1,   resolution: 78271.5169639999,   scale: 295828763.795777},
                 //{ level: 2,  resolution: 39135.7584820001,  scale: 147914381.897889},
                 { level: 3, resolution: 19567.8792409999, scale: 73957190.948944 },
                 { level: 4, resolution: 9783.93962049996, scale: 36978595.474472 },
                 { level: 5, resolution: 4891.96981024998, scale: 18489297.737236 },
                 { level: 6, resolution: 2445.98490512499, scale: 9244648.868618 },
                 { level: 7, resolution: 1222.99245256249, scale: 4622324.434309 },
                 { level: 8, resolution: 611.49622628138, scale: 2311162.217155 },
                 { level: 9, resolution: 305.748113140558, scale: 1155581.108577 },
                 { level: 10, resolution: 152.874056570411, scale: 577790.554289 },
                 { level: 11, resolution: 76.4370282850732, scale: 288895.277144 },
                 { level: 12, resolution: 38.2185141425366, scale: 144447.638572 },
                 { level: 13, resolution: 19.1092570712683, scale: 72223.819286 },
                 { level: 14, resolution: 9.55462853563415, scale: 36111.909643 },
                 { level: 15, resolution: 4.77731426794937, scale: 18055.954822 },
                 { level: 16, resolution: 2.38865713397468, scale: 9027.977411 },
                 { level: 17, resolution: 1.19432856685505, scale: 4513.988705 },
                 { level: 18, resolution: 0.597164283559817, scale: 2256.994353 },
                 { level: 19, resolution: 0.298582141647617, scale: 1128.497176 },
                 { level: 20, resolution: 0.1492910708238085, scale: 564.248587 },
                 { level: 21, resolution: 0.0746455354119043, scale: 282.1242935 }
                ]
            });

            directions = new Directions({
                map: map,
                routeTaskUrl: "@System.Configuration.ConfigurationManager.AppSettings["RouteTaskUrl"]",
                directionsLengthUnits: "esriKilometers",
                optimalRoute: true,
                showOptimalRouteOption: true,
                showMilesKilometersOption: false,
                showSaveButton: true,
                showPrintPage: true,
                dragging: false,
                searchOptions: {
                    sources: [
                      {
                          locator: new Locator("@System.Configuration.ConfigurationManager.AppSettings["GeoCoder"]"),
                          searchFields: [],
                          exactMatch: false,
                          searchExtent: null,
                          localSearchOptions: {
                              minScale: 300000,
                              distance: 50000
                          },
                          outFields: ["Addr_type"],
                          name: "Custom Geocoding Service",
                          placeholder: "@Resources.Resource.DirectionsSearchGeocoder",
                          maxResults: 10,
                          maxSuggestions: 10,
                          enableSuggestions: true,
                          enableSearchingAll: true,
                          autoComplete: true,
                          minCharacters: 1
                      }
                    ]
                },
                autoSolve: true
            }, "dir");

            directions.on("load", function (e) {

            });

            directions.startup();

            directions.on("directions-start", function (e) {

            });


            directions.on("directions-finish", function (e) {
                if ("undefined" != typeof e.result.routeResults) {
                    routeData = directions.stops;
                    if ($('.savebuttonDoublePrevention').length == 0) {
                        $(".savePrintBtnContainer").append("<div tabindex='0' role='button' class='savebuttonDoublePrevention esriResultsSave esriDirectionsButton esriDirectionsTabButton' data-blur-on-click='true' title='Spremi i podijeli rutu' style='display: inline-block;'></div>");
                    }
                }
            });

            $(window).load(function () {
                $('#Langugae_Name').css('background-color', '#333');
                $('#Langugae_Name').css('color', '#FFFFF');

                $('.esriRoutesContainer').css('height', '300px');

                if (window.location.href.indexOf("EN") > -1) {
                    $('#languagetext').text('English');
                    $('#lsLoggedInUser').text('Logout').css('font-size', '16px');
                    $('#choosApp1').text('SSO overridden');
                    $('#choosApp2').text('Select app');
                    $('#logoName').text('GDi car control').css('font-size', '18px');
                    $('#flagChange').removeClass();
                    $('#flagChange').toggleClass('flag-icon flag-icon-gb');
                    $('#logoText').text('@Resources.Resource.FooterText');

                }
                else {
                    $('#languagetext').text('Hrvatski');
                    $('#lsLoggedInUser').text('Odjava').css('font-size', '16px');
                    $('#choosApp1').text('SSO overridden');
                    $('#choosApp2').text('Odaberi aplikaciju');
                    $('#logoName').text('GDi auto nadzor').css('font-size', '18px');
                    $('#flagChange').removeClass();
                    $('#flagChange').toggleClass('flag-icon flag-icon-hr');
                    $('#logoText').text('@Resources.Resource.FooterText');

                }

                $('.savePrintBtnContainer').on('click', '.esriResultsSave', function (event) {
                    $("#liMapMenu").removeClass("selected");
                    $("#liRouteList").addClass("selected");
                    return false;
                });

                $('.chkclass').click(function () {

                    var getchkid = $(this).attr('id');
                    var isChecked = $('#' + getchkid).is(':checked');

                    var studentListVal = null;
                    studentListVal = [];

                    $('.group-check :checkbox:checked').each(function () {
                        studentListVal.push($(this).attr('value'));
                    });

                    var photos = null;
                    photos = esriRequest({ url: '@Url.Action("GetPoiGroupList", "Map", new { lang = "ID" })'.replace("ID", studentListVal), handleAs: "json" });
                    photos.then(addClusters, error);
                });

                $('.clusterName').click(function () {

                    var getlabelID = $(this).attr('id').replace("td","");
                    var isChecked = $('#chk' + getlabelID).is(':checked');

                    if(isChecked)
                    {
                        $('#chk' + getlabelID).prop('checked', false);
                    }
                    else
                    {
                        $('#chk' + getlabelID).prop('checked', true);
                    }


                    var studentListVal = null;
                    studentListVal = [];

                    $('.group-check :checkbox:checked').each(function () {
                        studentListVal.push($(this).attr('value'));
                    });

                    var photos = null;
                    photos = esriRequest({ url: '@Url.Action("GetPoiGroupList", "Map", new { lang = "ID" })'.replace("ID", studentListVal), handleAs: "json" });
                    photos.then(addClusters, error);
                });


                $('#routeListDiv').on('click', '.routeLoad', function () {
                    var routeID = $(this).attr('id');
                    var stops = esriRequest({ url: '@Url.Action("GetRouteData", "Home", new { lang = "ID" })'.replace("ID", routeID), handleAs: "json" });
                    stops.then(addStopsFromDB, error);
                });


                $('#routeListDiv').on('click', '.routeDelete', function () {
                    var r = confirm("Da li ste sigurni da želite obrisati rutu");
                    if (r == false) {
                        return false;
                    }

                    var routeID = $(this).attr('id');
                    $.ajax({
                        url: '@Url.Action("DeleteRoute", "Home")',
                        data: "{ 'routeID': '" + routeID + "' }",
                        dataType: 'json',
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        dataFilter: function (data) { return data; },
                        success: function (data) {
                            $(".route" + routeID).remove();
                        }
                    })
                });
            });

            var countStops = 0;

            function addStopsFromDB(resp) {
                directions.reset();
                var obj = JSON.parse(resp.Route);

                for (index = 0; index < obj.length; ++index) {
                    var arr = obj[index].name.split(',');
                    var point = new Point(obj[index].feature.geometry.x,obj[index].feature.geometry.y ,new SpatialReference({ wkid: obj[index].feature.geometry.spatialReference.wkid }));
                    directions.addStop(point, countStops);
                    countStops++;
                }

                directions.optimalRoute = resp.OptimalRoute;
                directions.returnToStart = resp.ReturnToStart;

                directions.getDirections();
                $("#liRouteList").removeClass("selected");
                $("#liMapMenu").addClass("selected");
                $('.esriRoutesContainer').slimScroll({
                    height: '583px',
                    position: 'right',
                    railVisible: true,
                    alwaysVisible: true
                });
            }

            (function ($) {
                $('.esriDirectionsButton ').click(function () {
                    $('.esriRoutesContainer').slimScroll({
                        height: '583px',
                        position: 'right',
                        railVisible: true,
                        alwaysVisible: true
                    });
                });
            })(jQuery);


            function validateForm() {
                if (routeData == null) {
                    alert("Potrebno je odabrati rutu");
                    return false;
                }
            }

            $('#saveDirection').click(function () {

                var optimalRoute = $("#dir_find_optimal_order").is(":checked");
                var returnToStart = $("#dir_stopsReturnToStart").is(":checked");

                var name = $("#routeName").val();
                if (name == null || name == "") {
                    alert("Potrebno je upisati ime rute");
                    return false;
                }

                if (routeData == null) {
                    alert("Potrebno je odabrati rutu");
                    return false;
                }
                $.ajax({
                    url: '@Url.Action("SaveRoute", "Home")',
                    data: "{ 'routeData': '" + JSON.stringify(routeData) + "', name: '" + name + "', 'optimalRoute':" + optimalRoute + ", 'returnToStart':" + returnToStart + " }",
                    dataType: 'json',
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    dataFilter: function (data) { return data; },
                    success: function (data) {
                        $("#routeName").val('');
                        var currentdate = new Date();
                        var datetime = currentdate.getDate() + "."
                                    + (currentdate.getMonth() + 1) + "."
                                    + currentdate.getFullYear() + ". "
                                    + currentdate.getHours() + ":"
                                    + currentdate.getMinutes() + ":"
                                    + currentdate.getSeconds();
                        //$("#routeListDiv").append("<div class='route" + data + "' style='margin-left: 10px;'><span>" + name + "</span><a id='" + data + "' href='#' class='routeDelete' style='float: right; margin-right: 5px;'>Obriši</a><a id='" + data + "' href='#' class='routeLoad' style='float: right; margin-right: 5px;'>Učitaj</a></div>");
                        $(".tablesorter").append("<tr class='route" + data + "'><td><span>" + name + "</span></td><td><span>" + datetime + "</span></td> <td><a id='" + data + "' href='#' class='routeDelete' style='float: right; margin-right: 5px;'><i class='mdi mdi-16px mdi-minus-circle' style='color:red'></i></a><a id='" + data + "' href='#' class='routeLoad' style='float: right; margin-right: 5px;'><i class='mdi mdi-16px mdi-plus-circle' style='color:green'></i></a></td></tr>");

                    }
                });
            });

            $("#keyword").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '@Url.Action("GetPoiList", "Home")',
                        data: "{ 'keywords': '" + request.term + "' }",
                        dataType: 'json',
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        dataFilter: function (data) { return data; },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item.PoiName + "(" + item.Address + ")",
                                    value: item.PoiName,
                                    id: item.PoiID
                                };
                            }))
                        }
                    });
                },
                minLength: 2,
                select: function (event, ui) {
                    $.ajax({
                        url: '@Url.Action("GetPoiByID", "Home")',
                        data: "{ 'id': '" + ui.item.id + "' }",
                        dataType: 'json',
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        dataFilter: function (data) { return data; },
                        success: function (data) {
                            var point = new Point([data.WmX,data.WmY],new SpatialReference({ wkid: @System.Configuration.ConfigurationManager.AppSettings["wkid"] }));
                            directions.addStop(point, countStops);
                            $('#keyword').val('');
                            countStops++;
                        }
                    });
                }

            });

            function addClusters(resp) {
                var photoInfo = {};
                var wgs = new SpatialReference({
                    "wkid": "@System.Configuration.ConfigurationManager.AppSettings["wkid"]"
                });
                photoInfo.data = arrayUtils.map(resp, function (p) {
                    var latlng = new Point(parseFloat(p.lat), parseFloat(p.lng), wgs);
                    var webMercator = webMercatorUtils.geographicToWebMercator(latlng);
                    var attributes = {
                        "Caption": latlng.x,
                        "Name": latlng.y,
                        "Image": p.image,
                        "Link": p.link,
                        "Colour": p.mapIconColour,
                    };
                    return {
                        "x": latlng.x,
                        "y": latlng.y,
                        "attributes": attributes
                    };
                });

                // popupTemplate to work with attributes specific to this dataset
                var popupTemplate = new PopupTemplate({
                    "title": "",
                    "fieldInfos": [{
                        "fieldName": "Caption",
                        visible: true
                    }, {
                        "fieldName": "Name",
                        "label": "By",
                        visible: true
                    }, {
                        "fieldName": "Link",
                        "label": "On Instagram",
                        visible: true
                    }]
                });

                // cluster layer that uses OpenLayers style clustering
                if (clusterLayer != null) map.removeLayer(clusterLayer);
                clusterLayer = new ClusterLayer({
                    "data": photoInfo.data,
                    "distance": 100,
                    "id": "clusters",
                    "labelColor": "#fff",
                    "labelOffset": 10,
                    "resolution": map.extent.getWidth() / map.width,
                    "singleColor": "#888",
                    "singleTemplate": popupTemplate
                });

                calculateRenderer = function (value) {


                    if (value.attributes.clusterCount > 1)
                        return value.attributes.clusterCount;
                    else {
                        switch (value.attributes.Colour) {
                            case "black":
                                return 100001;
                            case "blue":
                                return 100002;
                            case "cyan":
                                return 100003;
                            case "green":
                                return 100004;
                            case "magenta":
                                return 100005;
                            case "orange":
                                return 100006;
                            case "red":
                                return 100007;
                        }
                        return 100008;
                    }
                }

                var defaultSym = new SimpleMarkerSymbol().setSize(4);
                var renderer = new ClassBreaksRenderer(defaultSym, calculateRenderer);
                alert(resp[0].mapIconColour);
                var picBaseUrl = "@(HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority) + @HttpContext.Current.Request.ApplicationPath )/Content/2/img/cluster/";

                var black = new PictureMarkerSymbol(picBaseUrl + "poi-black.png", 40, 40).setOffset(0, 15);
                var blue = new PictureMarkerSymbol(picBaseUrl + "poi-blue.png", 40, 40).setOffset(0, 15);
                var cyan = new PictureMarkerSymbol(picBaseUrl + "poi-cyan.png", 40, 40).setOffset(0, 15);
                var green = new PictureMarkerSymbol(picBaseUrl + "poi-green.png", 40, 40).setOffset(0, 15);
                var magenta = new PictureMarkerSymbol(picBaseUrl + "poi-magenta.png", 40, 40).setOffset(0, 15);
                var orange = new PictureMarkerSymbol(picBaseUrl + "poi-orange.png", 40, 40).setOffset(0, 15);
                var red = new PictureMarkerSymbol(picBaseUrl + "poi-red.png", 40, 40).setOffset(0, 15);
                var yellow = new PictureMarkerSymbol(picBaseUrl + "poi-yellow.png", 40, 40).setOffset(0, 15);

                var group = new PictureMarkerSymbol(picBaseUrl + "poi-group.png", 40, 40).setOffset(0, 15);

                //renderer.addBreak(0, 1, blue);
                renderer.addBreak(1, 200, group);
                renderer.addBreak(200, 1001, group);

                renderer.addBreak(100001, 100001, black);
                renderer.addBreak(100002, 100002, blue);
                renderer.addBreak(100003, 100003, cyan);
                renderer.addBreak(100004, 100004, green);
                renderer.addBreak(100006, 100005, magenta);
                renderer.addBreak(100007, 100006, orange);
                renderer.addBreak(100008, 100007, red);
                renderer.addBreak(100008, 100008, yellow);

                clusterLayer.setRenderer(renderer);

                map.addLayer(clusterLayer);

                // close the info window when the map is clicked
                map.on("click", cleanUp);
                // close the info window when esc is pressed
                map.on("key-down", function (e) {
                    if (e.keyCode === 27) {
                        cleanUp();
                    }
                });
            }

            function cleanUp() {
                map.infoWindow.hide();
                clusterLayer.clearSingles();
            }

            function error(err) {
                console.log("something failed: ", err);
            }

            // show cluster extents...
            // never called directly but useful from the console
            window.showExtents = function () {
                var extents = map.getLayer("clusterExtents");
                if (extents) {
                    map.removeLayer(extents);
                }
                extents = new GraphicsLayer({ id: "clusterExtents" });
                var sym = new SimpleFillSymbol().setColor(new Color([205, 193, 197, 0.5]));

                arrayUtils.forEach(clusterLayer._clusters, function (c, idx) {
                    var e = c.attributes.extent;
                    extents.add(new Graphic(new Extent(e[0], e[1], e[2], e[3], map.spatialReference), sym));
                }, this);
                map.addLayer(extents, 0);
            };
        });
    });

</script>
@*<input type="text" name="routeData2" id="routeData2" value="" style="margin-top:0px !important;" />*@
@Html.HiddenFor(m => m.CusPoiInput)
<div id="vmap_world" class="vmaps" style="height:100vh">
    <div id="map" dir="ltr"></div>
</div>

<script>

</script>
